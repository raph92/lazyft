from freqtrade.strategy.interface import IStrategy
from typing import Dict, List
from functools import reduce
from pandas import DataFrame
import numpy as np
# --------------------------------

import talib.abstract as ta
import freqtrade.vendor.qtpylib.indicators as qtpylib


buy_params = ${params} or {
    'bbdelta-close-value':    0.00115,
    'closedelta-close-value': 0.0223,
    'lower-value':            -0.79367,
    'tail-bbdelta-value':     0.11348
}


# ROI table:
minimal_roi = ${minimal_roi} or {
    "0":  0.05738,
    "5":  0.01442,
    "16": 0.0092,
    "40": 0
}

# Stoploss:
stoploss = ${stoploss} or -0.30169

# Trailing stop:
trailing_params = ${trailing_params} or {}


def bollinger_bands(stock_price, window_size, num_of_std):
    rolling_mean = stock_price.rolling(window=window_size).mean()
    rolling_std = stock_price.rolling(window=window_size).std()
    lower_band = rolling_mean - (rolling_std * num_of_std)

    return rolling_mean, lower_band


class $classname(IStrategy):
    minimal_roi = minimal_roi

    # Optimal stoploss designed for the strategy
    # This attribute will be overridden if the config file contains "stoploss"
    stoploss = stoploss

    locals().update(trailing_params)

    timeframe = '1m'

    def populate_indicators(self, dataframe: DataFrame,
                            metadata: dict) -> DataFrame:
        mid, lower = bollinger_bands(dataframe['close'], window_size=40,
                                     num_of_std=2)
        dataframe['mid'] = np.nan_to_num(mid)
        dataframe['lower'] = np.nan_to_num(lower)
        dataframe['bbdelta'] = (dataframe['mid'] - dataframe['lower']).abs()
        dataframe['pricedelta'] = (
            dataframe['open'] - dataframe['close']).abs()
        dataframe['closedelta'] = (
            dataframe['close'] - dataframe['close'].shift()).abs()
        dataframe['tail'] = (dataframe['close'] - dataframe['low']).abs()
        return dataframe

    def populate_buy_trend(self, dataframe: DataFrame,
                           metadata: dict) -> DataFrame:
        dataframe.loc[
            (
                dataframe['lower'].shift().gt(buy_params['lower-value']) &
                dataframe['bbdelta'].gt(dataframe['close'] * buy_params['bbdelta-close-value']) &
                dataframe['closedelta'].gt(dataframe['close'] * buy_params['closedelta-close-value']) &
                dataframe['tail'].lt(dataframe['bbdelta'] * buy_params['tail-bbdelta-value']) &
                dataframe['close'].lt(dataframe['lower'].shift()) &
                dataframe['close'].le(dataframe['close'].shift())
            ),
            'buy'] = 1
        return dataframe

    def populate_sell_trend(self, dataframe: DataFrame,
                            metadata: dict) -> DataFrame:
        """
        no sell signal
        """
        dataframe['sell'] = 0
        return dataframe
